#!/usr/bin/env bash
# claude-flake init-project - Set up intelligent project detection
# Generates .envrc with language-specific tooling for current directory

set -euo pipefail

# Configuration
CLAUDE_FLAKE_URL="${CLAUDE_FLAKE_URL:-github:smithclay/claude-flake}"
FORCE_OVERRIDE="${FORCE_OVERRIDE:-false}"

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Check if directory is valid
validate_directory() {
    local dir="$1"
    
    if [[ ! -d "$dir" ]]; then
        log_error "Directory does not exist: $dir"
        return 1
    fi
    
    if [[ ! -w "$dir" ]]; then
        log_error "Directory is not writable: $dir"
        return 1
    fi
    
    return 0
}

# Detect project type based on file markers
detect_project_type() {
    local dir="$1"
    
    # Check for user override first
    if [[ -f "$dir/.claude-env" ]]; then
        local override
        override=$(head -1 "$dir/.claude-env" | xargs)
        if [[ -n "$override" ]]; then
            echo "$override"
            return 0
        fi
    fi
    
    if [[ -n "${CLAUDE_ENV:-}" ]]; then
        echo "$CLAUDE_ENV"
        return 0
    fi
    
    # Priority detection: Nix ‚Üí Go ‚Üí Rust ‚Üí Python ‚Üí Node.js ‚Üí Universal
    if [[ -f "$dir/flake.nix" ]] || [[ -f "$dir/shell.nix" ]] || [[ -f "$dir/default.nix" ]]; then
        echo "nix"
    elif [[ -f "$dir/go.mod" ]] || [[ -f "$dir/go.sum" ]]; then
        echo "go"
    elif [[ -f "$dir/Cargo.toml" ]] || [[ -f "$dir/Cargo.lock" ]]; then
        echo "rust"
    elif [[ -f "$dir/pyproject.toml" ]] || [[ -f "$dir/requirements.txt" ]] || [[ -f "$dir/poetry.lock" ]]; then
        echo "python"
    elif [[ -f "$dir/package.json" ]] || [[ -f "$dir/yarn.lock" ]] || [[ -f "$dir/package-lock.json" ]]; then
        echo "nodejs"
    else
        echo "universal"
    fi
}

# Generate .envrc content for project type
generate_envrc() {
    local project_type="$1"
    local flake_url="$2"
    
    case "$project_type" in
        rust)
            cat << EOF
# Generated by claude-flake init-project
# Rust development environment with enhanced tooling

use flake $flake_url#rust-dev

# Rust-specific environment variables
export RUST_BACKTRACE=1
export CARGO_HOME="\$PWD/.cargo"

# Load additional tools if available
if command -v rust-analyzer >/dev/null 2>&1; then
    export PATH="\$PATH:\$(dirname \$(which rust-analyzer))"
fi

echo "ü¶Ä Rust development environment loaded"
echo "Available: cargo, clippy, rust-analyzer, rustfmt"
if [[ -f Cargo.toml ]]; then
    echo "üì¶ Project: \$(grep '^name = ' Cargo.toml | cut -d'"' -f2)"
fi
EOF
            ;;
        python)
            cat << EOF
# Generated by claude-flake init-project  
# Python development environment with enhanced tooling

use flake $flake_url#python-dev

# Python-specific environment variables
export PYTHONPATH="\$PWD:\$PYTHONPATH"
export PIP_REQUIRE_VIRTUALENV=true

# Poetry configuration
if [[ -f pyproject.toml ]]; then
    export POETRY_VENV_IN_PROJECT=true
fi

echo "üêç Python development environment loaded"  
echo "Available: poetry, black, pytest, mypy, ruff"
if [[ -f pyproject.toml ]]; then
    echo "üì¶ Project detected with pyproject.toml"
elif [[ -f requirements.txt ]]; then
    echo "üì¶ Project detected with requirements.txt"
fi
EOF
            ;;
        nodejs)
            cat << EOF
# Generated by claude-flake init-project
# Node.js development environment with enhanced tooling

use flake $flake_url#nodejs-dev

# Node.js-specific environment variables
export NODE_ENV=development
export NPM_CONFIG_PREFIX="\$PWD/.npm-global"
export PATH="\$PWD/node_modules/.bin:\$PATH"

echo "üì¶ Node.js development environment loaded"
echo "Available: yarn, pnpm, eslint, prettier, typescript"
if [[ -f package.json ]] && command -v jq >/dev/null 2>&1; then
    echo "üì¶ Project: \$(jq -r .name package.json 2>/dev/null || echo 'unnamed')"
fi

# Detect package manager
if [[ -f yarn.lock ]]; then
    echo "Using Yarn package manager"
elif [[ -f pnpm-lock.yaml ]]; then
    echo "Using pnpm package manager"
fi
EOF
            ;;
        go)
            cat << EOF
# Generated by claude-flake init-project
# Go development environment with enhanced tooling

use flake $flake_url#go-dev

# Go-specific environment variables
export GOPATH="\$PWD/.go"
export GOPROXY=https://proxy.golang.org,direct
export GOSUMDB=sum.golang.org
export CGO_ENABLED=1

# Create GOPATH if it doesn't exist
mkdir -p "\$GOPATH"

echo "üêπ Go development environment loaded"
echo "Available: go, gopls, golangci-lint, gofmt, delve"
if [[ -f go.mod ]]; then
    echo "üì¶ Module: \$(grep '^module ' go.mod | cut -d' ' -f2)"
fi
EOF
            ;;
        nix)
            cat << EOF
# Generated by claude-flake init-project
# Nix development environment with enhanced tooling

use flake $flake_url#nix-dev

# Nix-specific environment variables
export NIX_PATH="nixpkgs=channel:nixos-unstable"

# Enable experimental features for development
export NIX_CONFIG="experimental-features = nix-command flakes"

echo "‚ùÑÔ∏è  Nix development environment loaded"
echo "Available: nixfmt, statix, nil, nix-tree"
if [[ -f flake.nix ]]; then
    echo "üì¶ Nix flake project detected"
    use flake .
fi
EOF
            ;;
        universal)
            cat << EOF
# Generated by claude-flake init-project
# Universal development environment

use flake $flake_url#universal-dev

# Universal environment variables
export EDITOR=\${EDITOR:-nvim}
export PAGER=\${PAGER:-bat}

echo "üåç Universal development environment loaded"
echo "Available: git, gh, neovim, tmux, and modern CLI tools"

# Load project-specific configuration if available
if [[ -f .claude-env ]]; then
    echo "Loading project overrides from .claude-env"
    source .claude-env
fi
EOF
            ;;
        *)
            log_error "Unknown project type: $project_type"
            return 1
            ;;
    esac
}

# Main init-project function
init_project() {
    local project_dir="$1"
    
    log_info "Initializing claude-flake enhanced environment in: $project_dir"
    
    # Validate directory
    if ! validate_directory "$project_dir"; then
        return 1
    fi
    
    # Check for existing .envrc
    if [[ -f "$project_dir/.envrc" ]] && [[ "$FORCE_OVERRIDE" != "true" ]]; then
        log_warning "Existing .envrc found"
        echo -n "Overwrite existing .envrc? [y/N]: "
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            log_info "Cancelled by user"
            return 0
        fi
    fi
    
    # Detect project type
    local project_type
    project_type=$(detect_project_type "$project_dir")
    log_info "Detected project type: $project_type"
    
    # List detected markers for transparency
    local markers=()
    [[ -f "$project_dir/flake.nix" ]] && markers+=("flake.nix (nix)")
    [[ -f "$project_dir/go.mod" ]] && markers+=("go.mod (go)")
    [[ -f "$project_dir/Cargo.toml" ]] && markers+=("Cargo.toml (rust)")
    [[ -f "$project_dir/pyproject.toml" ]] && markers+=("pyproject.toml (python)")
    [[ -f "$project_dir/package.json" ]] && markers+=("package.json (nodejs)")
    
    if [[ ${#markers[@]} -gt 0 ]]; then
        log_info "Found markers: ${markers[*]}"
    fi
    
    # Generate .envrc content
    local envrc_content
    envrc_content=$(generate_envrc "$project_type" "$CLAUDE_FLAKE_URL")
    
    # Write .envrc file
    echo "$envrc_content" > "$project_dir/.envrc"
    
    # Make it executable (optional, but helpful)
    chmod +x "$project_dir/.envrc"
    
    log_success "Generated .envrc for $project_type project"
    log_info "Enhanced environment will load on next directory entry"
    
    # Check if direnv is available
    if ! command -v direnv >/dev/null 2>&1; then
        log_warning "direnv not found - .envrc will not auto-load"
        log_info "Install with: nix profile install nixpkgs#direnv"
    else
        log_info "Run 'direnv allow' to enable automatic loading"
    fi
    
    # Show next steps
    echo ""
    echo "üöÄ Next steps:"
    echo "  1. cd $project_dir"
    echo "  2. direnv allow"
    echo "  3. Enhanced tooling will load automatically!"
}

# Script help
show_help() {
    cat << EOF
claude-flake init-project - Set up intelligent project detection

Usage: claude-flake init-project [DIRECTORY]

Arguments:
  DIRECTORY     Project directory to enhance (default: current directory)

Environment Variables:
  CLAUDE_FLAKE_URL      Flake URL to use (default: github:smithclay/claude-flake)
  CLAUDE_ENV           Override detected project type
  FORCE_OVERRIDE       Skip confirmation for existing .envrc (default: false)

Examples:
  claude-flake init-project                    # Initialize current directory
  claude-flake init-project ~/my-rust-project  # Initialize specific directory
  CLAUDE_ENV=python claude-flake init-project  # Force Python environment

Supported project types:
  - rust     (Cargo.toml, Cargo.lock)
  - python   (pyproject.toml, requirements.txt, poetry.lock)
  - nodejs   (package.json, yarn.lock, package-lock.json)
  - go       (go.mod, go.sum)
  - nix      (flake.nix, shell.nix, default.nix)
  - universal (fallback for all other projects)

Override Options:
  - Create .claude-env file with desired type
  - Set CLAUDE_ENV environment variable
  - Priority: .claude-env > CLAUDE_ENV > auto-detection

For detailed documentation and troubleshooting:
  - LANGUAGE_DETECTION.md - Complete detection guide
  - scripts/INIT_PROJECT_GUIDE.md - Quick reference
EOF
}

# Main script logic
main() {
    case "${1:-}" in
        -h|--help|help)
            show_help
            exit 0
            ;;
        "")
            init_project "$(pwd)"
            ;;
        *)
            init_project "$1"
            ;;
    esac
}

# Run main function
main "$@"